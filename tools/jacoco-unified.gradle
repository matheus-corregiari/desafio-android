apply plugin: 'jacoco'

jacoco {
    toolVersion = "$jacocoVersion"
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}

final Closure<Map<String, Project>> findAllChildProjects
findAllChildProjects = { project ->
    def lisOfChildProjects = new ArrayList<Project>()

    project.childProjects.each { childProjectPair ->
        def childProject = childProjectPair.value
        if (childProject.childProjects.isEmpty()) {
            if (!childProject.name.contains("test"))
                lisOfChildProjects.add(childProject)
        } else {
            lisOfChildProjects.addAll(findAllChildProjects(childProject))
        }
    }
    lisOfChildProjects
}

final Closure<Map<String, Project>> findAllSourcesPath = { allChildProjects, flavorName ->
    def allSourceDirectories = new ArrayList<String>()
    allChildProjects.each { childProject ->

        // Path to Main sources
        final mainSrcJavaPath = "${childProject.projectDir}/src/main/java"
        final mainSrcKotlinPath = "${childProject.projectDir}/src/main/kotlin"

        // Path to Flavor sources
        final flavorSrcJavaPath = "${childProject.projectDir}/src/$flavorName/java"
        final flavorSrcKotlinPath = "${childProject.projectDir}/src/$flavorName/kotlin"

        allSourceDirectories.addAll([mainSrcJavaPath, mainSrcKotlinPath, flavorSrcJavaPath, flavorSrcKotlinPath])
    }
    allSourceDirectories
}

final Closure<Map<String, Project>> findAllClassesPath = { allChildProjects, flavorName ->

    final fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*',
                        '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*',
                        '**/*_.*', '**/*_*.*', '**/*_$*.*', '**/*ViewBinder*.*', '**/*$ViewBinder*.*']

    final fileFilterKt = fileFilter + ['**/*$Companion.*', '**/*Kt.*', '**/*Kt$.*', '**/*.new *', '**/*.new *']

    def allClassesDirectories = new ArrayList<String>()
    allChildProjects.each { childProject ->

        final debugTreeJava = fileTree(dir: "${childProject.buildDir}/intermediates/classes/debug", excludes: fileFilter)
        final debugTreeKotlin = fileTree(dir: "${childProject.buildDir}/tmp/kotlin-classes/debug", excludes: fileFilterKt)

        final flavorDebugTreeJava = fileTree(dir: "${childProject.buildDir}/intermediates/classes/$flavorName/debug/com/itau/latam", excludes: fileFilter)
        final flavorDebugTreeKotlin = fileTree(dir: "${childProject.buildDir}/tmp/kotlin-classes/${flavorName}Debug", excludes: fileFilterKt)

        allClassesDirectories.addAll([debugTreeJava.files, debugTreeKotlin.files, flavorDebugTreeJava.files, flavorDebugTreeKotlin.files])
    }
    allClassesDirectories
}

final Closure<Map<String, Project>> findAllCoverageFiles = { allChildProjects, flavorName ->

    def allCoverageFiles = new ArrayList<File>()
    allChildProjects.each { childProject ->
        allCoverageFiles.addAll(fileTree(dir: "$childProject.buildDir",
                includes: [
                        "jacoco/test${flavorName.capitalize()}DebugUnitTest.exec",
                        "outputs/code-coverage/connected/flavors/${flavorName.toUpperCase()}/*coverage.ec",
                        "outputs/code-coverage/connected/*coverage.ec"
                ]).files)
    }
    allCoverageFiles
}

childProjects.each { childProjectPair ->
    childProjectPair.value.afterEvaluate {
        if (!childProjectPair.value.hasProperty('android')) return
        childProjectPair.value.android.productFlavors.all { flavor ->
            if (rootProject.tasks.findByName("jacocoCoverageReport-${flavor.name}-unified") == null)
                rootProject.task("jacocoCoverageReport-${flavor.name}-unified", type: JacocoReport, group: "coverage-report") {
                    def allChildProjects = findAllChildProjects(rootProject)
                    reports {
                        xml.enabled = true
                        html.enabled = true
                    }

                    sourceDirectories = files(findAllSourcesPath(allChildProjects, flavor.name))
                    classDirectories = files(findAllClassesPath(allChildProjects, flavor.name))
                    executionData = files(findAllCoverageFiles(allChildProjects, flavor.name))

                    doFirst {
                        println "\n---------- Start to generate the Unified coverage report for flavor ${flavor.name} ----------"
                    }

                    doLast {
                        println "\n---------- Unified coverage report for flavor ${flavor.name} has finished!! ----------\n"
                        println "Report path -> file://${reports.html.destination}/index.html\n"
                    }
                }
        }


        if (childProjectPair.value.android.productFlavors.isEmpty() && rootProject.tasks.findByName("jacocoCoverageReport-unified") == null)
            rootProject.task("jacocoCoverageReport-unified", type: JacocoReport, group: "coverage-report") {
                def allChildProjects = findAllChildProjects(rootProject)
                reports {
                    xml.enabled = true
                    html.enabled = true
                }

                sourceDirectories = files(findAllSourcesPath(allChildProjects, ""))
                classDirectories = files(findAllClassesPath(allChildProjects, ""))
                executionData = files(findAllCoverageFiles(allChildProjects, ""))

                doFirst {
                    println "\n---------- Start to generate the Unified coverage report ----------"
                }

                doLast {
                    println "\n---------- Unified coverage report has finished!! ----------\n"
                    println "Report path -> file://${reports.html.destination}/index.html\n"
                }
            }
    }
}